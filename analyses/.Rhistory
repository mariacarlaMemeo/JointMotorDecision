ggsave(file=paste0(PlotDir,"time_conf_2d",schon_lab,".png"), dpi = 300, units=c("cm"), height =20, width = 20)
#########################################################
### Order data according to agents
#rt agent 1
rt1_a1=curdat[curdat$AgentTakingFirstDecision==1,c("rt_final1","trial","group")]
rt2_a1=curdat[curdat$AgentTakingSecondDecision==1,c("rt_final2","trial","group")]
names(rt1_a1) = c("rt","trial","group")
names(rt2_a1) = c("rt","trial","group")
drt_a1 = rbind(rt1_a1,rt2_a1)
rt_a1  = with(drt_a1, drt_a1[order(group,trial,rt),])
#rt agent 2
rt1_a2=curdat[curdat$AgentTakingFirstDecision==2,c("rt_final1","trial","group")]
rt2_a2=curdat[curdat$AgentTakingSecondDecision==2,c("rt_final2","trial","group")]
names(rt1_a2) = c("rt","trial","group")
names(rt2_a2) = c("rt","trial","group")
drt_a2 = rbind(rt1_a2,rt2_a2)
rt_a2  = with(drt_a2, drt_a2[order(group,trial,rt),])
#mt agent 1
mt1_a1=curdat[curdat$AgentTakingFirstDecision==1,c("mt_final1","trial","group")]
mt2_a1=curdat[curdat$AgentTakingSecondDecision==1,c("mt_final2","trial","group")]
names(mt1_a1) = c("mt","trial","group")
names(mt2_a1) = c("mt","trial","group")
dmt_a1 = rbind(mt1_a1,mt2_a1)
mt_a1  = with(dmt_a1, dmt_a1[order(group,trial,mt),])
#mt agent 2
mt1_a2=curdat[curdat$AgentTakingFirstDecision==2,c("mt_final1","trial","group")]
mt2_a2=curdat[curdat$AgentTakingSecondDecision==2,c("mt_final2","trial","group")]
names(mt1_a2) = c("mt","trial","group")
names(mt2_a2) = c("mt","trial","group")
dmt_a2 = rbind(mt1_a2,mt2_a2)
mt_a2  = with(dmt_a2, dmt_a2[order(group,trial,mt),])
####
#merge
(rt_a1$trial == rt_a2$trial) && (mt_a1$trial == mt_a2$trial)
curdat$A1_rtKin = rt_a1$rt
curdat$A2_rtKin = rt_a2$rt
curdat$A1_mtKin = mt_a1$mt
curdat$A2_mtKin = mt_a2$mt
#rt - calc the average, se, ci
rt_conf_a1  = curdat[,c("A1_conf","A1_rtKin")]; names(rt_conf_a1) = c("conf","rtKin")
rt_conf_a2  = curdat[,c("A2_conf","A2_rtKin")]; names(rt_conf_a2) = c("conf","rtKin")
rt_conf     = rbind(rt_conf_a1,rt_conf_a2)
rt_conf_sum = summarySE(rt_conf,measurevar="rtKin",groupvars=c("conf"))
#mt - calc the average, se, ci
mt_conf_a1  = curdat[,c("A1_conf","A1_mtKin")]; names(mt_conf_a1) = c("conf","mtKin")
mt_conf_a2  = curdat[,c("A2_conf","A2_mtKin")]; names(mt_conf_a2) = c("conf","mtKin")
mt_conf     = rbind(mt_conf_a1,mt_conf_a2)
mt_conf_sum = summarySE(mt_conf,measurevar="mtKin",groupvars=c("conf"))
names(rt_conf_sum) = c("conf","N","var","sd","se","ci")
names(mt_conf_sum) = c("conf","N","var","sd","se","ci")
mt_rt_conf_sum = rbind(rt_conf_sum,mt_conf_sum);
mt_rt_conf_sum$var_lab = c(replicate(length(rt_conf_sum), "rt"),replicate(length(mt_conf_sum), "mt"))
# plot that include RT and MT as a function of confidence level (across participants)
pd <- position_dodge(0.001)
ggplot(mt_rt_conf_sum, aes(x=conf, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("agent confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual all)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=paste0(PlotDir,"time_conf.png",schon_lab,".png"), dpi = 300, units=c("cm"), height =20, width = 20)
##### THIS IS NEW
for (v in 1:2){
################## plot RT and MT as a function of target contrast  ##################
if (v==1){lab ="RT"
all <- curdat[,c("targetContrast","rt_final1","rt_final2","rt_finalColl")]} else {lab="MT"
all <- curdat[,c("targetContrast","mt_final1","mt_final2","mt_finalColl")]}#
all_long <- melt(all, id="targetContrast")  # convert to long format
# rename factor levels
levels(all_long$variable) <- c("Individual", "Individual", "Collective")
all_sum = summarySE(all_long,measurevar="value",groupvars=c("variable","targetContrast"))
var = all_sum$value
# rename variables
names(all_sum)[names(all_sum)=='value'] <- lab
names(all_sum)[names(all_sum)=='variable'] <- 'DecisionType'
# plot for each pair
pd <- position_dodge(0.001)
print(ggplot(all_sum, aes(x=targetContrast, y=var, color=DecisionType, group=DecisionType)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.4,1.5), breaks=seq(0.4,1.5, by=0.1)) +
# scale_x_continuous(limits = c(0.1,0.265), breaks=seq(0.1,0.265, by=0.05)) +
geom_point(aes(shape=DecisionType, color=DecisionType, size=DecisionType), position=pd) +
geom_line(aes(linetype=DecisionType, color=DecisionType), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("steelblue1", "darkgreen")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("contrast level") + ylab(paste("mean ",lab," [s]")) +   # Set axis labels
ggtitle(paste(lab," as a function of task difficulty")) +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9)))
ggsave(file=sprintf(paste0("%s",lab,"_ave",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
}
###per group
for (m in 1:2){
################## plot RT and MT as a function of target contrast/per agent  ##################
if (m==1){lab ="RT"
all <- curdat[,c("targetContrast","A1_rtKin","A2_rtKin","rt_finalColl","group")]
lim = c(0.2,1.6)} else {lab="MT"
all <- curdat[,c("targetContrast","A1_mtKin","A2_mtKin","mt_finalColl","group")]
lim = c(0.5,2.5)}#
all$group=as.factor(all$group)
if(schon_data){all_pairs = c(100,101,103)} else{all_pairs = c(100,101,102,103)}
for (g in all_pairs){
sub_all=all[all$group==g,]
sub_all=subset(sub_all, select = -c(group) )
all_long <- melt(sub_all, id="targetContrast")  # convert to long format
# rename factor levels
levels(all_long$variable) <- c("A1", "A2", "Collective")
all_sum = summarySE(all_long,measurevar="value",groupvars=c("variable","targetContrast"))
var = all_sum$value
# rename variables
names(all_sum)[names(all_sum)=='value'] <- lab
names(all_sum)[names(all_sum)=='variable'] <- 'DecisionType'
# plot for each pair
pd <- position_dodge(0.001)
print(ggplot(all_sum, aes(x=targetContrast, y=var, color=DecisionType, group=DecisionType)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
#scale_y_continuous(limits = lim, breaks=seq(lim[1],lim[2], by=0.1)) +
# scale_x_continuous(limits = c(0.1,0.265), breaks=seq(0.1,0.265, by=0.05)) +
geom_point(aes(shape=DecisionType, color=DecisionType, size=DecisionType), position=pd) +
geom_line(aes(linetype=DecisionType, color=DecisionType), size=1, position=pd) +
scale_shape_manual(values=c(15, 16, 17)) +
scale_color_manual(values=c("blue3", "gold2", "darkgreen")) +
scale_linetype_manual(values=c("dotted","dashed","solid")) +
scale_size_manual(values=c(3,3,3)) +
xlab("contrast level") + ylab(paste("mean ",lab," [s]")) +   # Set axis labels
ggtitle(paste(as.character(g)," ",lab," as a function of task difficulty")) +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9)))
ggsave(file=sprintf(paste0("%s",as.character(g),"_",lab,"_ave",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
}
}
##### THIS IS NEW
##############################################################################################################
#                                     OBSERVATION                                                            #
##############################################################################################################
curobs = "Results_updated_12012023_magic.xlsx" #observation data
file <- sprintf('%s%s', DataDirObs, curobs)
# read all the sheets, i.e. all the pairs data, the from the excel file of observation
datObs = read_all_sheets(file,"P","A:U")
curdatObs = rbindlist(datObs)
names(curdatObs)[names(curdatObs)=="Trial"] <- "trial_obs"
names(curdatObs)[names(curdatObs)=="Block"] <- "block_obs"
names(curdatObs)[names(curdatObs)=="Group"] <- "pair_obs"
names(curdatObs)[names(curdatObs)=="CorrResp"] <- "agent_confidence"
names(curdatObs)[names(curdatObs)=="SubjResp"] <- "observer_confidence"
names(curdatObs)[names(curdatObs)=="SubjAcc01"] <- "observer_acc"
names(curdatObs)[names(curdatObs)=="SubjRTnorm"] <- "observer_RTnorm"
if(schon_data){curdatObs    = curdatObs[curdatObs$pair_obs!=102,]}
#combine execution and observation
#First remove the trials in which the video was not recorded during execution
exedat      = curdat[-c(2,6,8),]
exedat      = as.data.frame(lapply(exedat, rep, each=4)) #repeat each row 4 times to match the observation data (4 blocks ordered in Excel so that each the first 4 rows represent trial1 from block 1-2-3-4)
exedat_a2a1 = with(exedat, exedat[order(group,-AgentTakingSecondDecision),])#first agent2 acting second, observed by agent1 (to align with obsdat)
names(exedat_a2a1)[names(exedat_a2a1)=="trial"] <- "trial_exe"
names(exedat_a2a1)[names(exedat_a2a1)=="group"] <- "pair_exe"
#Check if the order of agents is the same
all(exedat_a2a1$AgentTakingSecondDecision==curdatObs$Pagent)
all(exedat_a2a1$AgentTakingFirstDecision==curdatObs$Oagent)
if (dim(exedat_a2a1)[1] == dim(curdatObs)[1]){merge = 1}
#merge execution and observation
if (merge) {inout = cbind(exedat_a2a1,curdatObs)}
sinout = inout[,c("pair_exe","pair_obs","Pagent","Oagent","trial_exe","trial_obs","block_obs","Video","targetContrast","firstSecondInterval",
"agent_confidence","observer_confidence","observer_acc","observer_RTnorm",
"A1_acc","A1_conf","A1_confRT","A2_acc","A2_conf","A2_confRT","Coll_acc","Coll_conf","Coll_confRT",
"AgentTakingSecondDecision","rt_final2","mt_final2","A1_rtKin","A2_rtKin","A1_mtKin","A2_mtKin")]
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(
shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(
method = lm, # Add linear regression line
color = "blue",
fill = "#69b3a2",
se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
lim
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)
sinout$pair_exe
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_exe)
# load necessary/useful libraries
## Load libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire",
"ggpur","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
install.packages("ggpubr")
install.packages("ggpubr")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
curobs = "Results_updated_12012023_magic.xlsx" #observation data
file <- sprintf('%s%s', DataDirObs, curobs)
# read all the sheets, i.e. all the pairs data, the from the excel file of observation
datObs = read_all_sheets(file,"P","A:U")
curdatObs = rbindlist(datObs)
names(curdatObs)[names(curdatObs)=="Trial"] <- "trial_obs"
names(curdatObs)[names(curdatObs)=="Block"] <- "block_obs"
names(curdatObs)[names(curdatObs)=="Group"] <- "pair_obs"
names(curdatObs)[names(curdatObs)=="CorrResp"] <- "agent_confidence"
names(curdatObs)[names(curdatObs)=="SubjResp"] <- "observer_confidence"
names(curdatObs)[names(curdatObs)=="SubjAcc01"] <- "observer_acc"
names(curdatObs)[names(curdatObs)=="SubjRTnorm"] <- "observer_RTnorm"
if(schon_data){curdatObs    = curdatObs[curdatObs$pair_obs!=102,]}
#combine execution and observation
#First remove the trials in which the video was not recorded during execution
exedat      = curdat[-c(2,6,8),]
exedat      = as.data.frame(lapply(exedat, rep, each=4)) #repeat each row 4 times to match the observation data (4 blocks ordered in Excel so that each the first 4 rows represent trial1 from block 1-2-3-4)
exedat_a2a1 = with(exedat, exedat[order(group,-AgentTakingSecondDecision),])#first agent2 acting second, observed by agent1 (to align with obsdat)
names(exedat_a2a1)[names(exedat_a2a1)=="trial"] <- "trial_exe"
names(exedat_a2a1)[names(exedat_a2a1)=="group"] <- "pair_exe"
#Check if the order of agents is the same
all(exedat_a2a1$AgentTakingSecondDecision==curdatObs$Pagent)
all(exedat_a2a1$AgentTakingFirstDecision==curdatObs$Oagent)
if (dim(exedat_a2a1)[1] == dim(curdatObs)[1]){merge = 1}
#merge execution and observation
if (merge) {inout = cbind(exedat_a2a1,curdatObs)}
sinout = inout[,c("pair_exe","pair_obs","Pagent","Oagent","trial_exe","trial_obs","block_obs","Video","targetContrast","firstSecondInterval",
"agent_confidence","observer_confidence","observer_acc","observer_RTnorm",
"A1_acc","A1_conf","A1_confRT","A2_acc","A2_conf","A2_confRT","Coll_acc","Coll_conf","Coll_confRT",
"AgentTakingSecondDecision","rt_final2","mt_final2","A1_rtKin","A2_rtKin","A1_mtKin","A2_mtKin")]
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
## Functions
source('C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/temporalLagMEmodulation/Temporal Lag of ME modulation/read_all_sheets.R')
##flag
all_script = FALSE #run all the script
schon_data = FALSE #remove 1 pair(102) because of the unbalanced confidence answers
# select directory
# DataDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/'
# DataDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/video_cut/'
DataDir = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/'
DataDirObs = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/data_obs/'
# save plots here
#PlotDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/pilotPlots/'
# PlotDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/pilotPlots/video_cut/'
PlotDir = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/plot/'
# load necessary/useful libraries
## Load libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire",
"ggpur","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
