axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9)))
ggsave(file=sprintf(paste0("%s",as.character(g),"_",lab,"_ave",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
}
}
##### THIS IS NEW
##############################################################################################################
#                                     OBSERVATION                                                            #
##############################################################################################################
curobs = "Results_updated_12012023_magic.xlsx" #observation data
file <- sprintf('%s%s', DataDirObs, curobs)
# read all the sheets, i.e. all the pairs data, the from the excel file of observation
datObs = read_all_sheets(file,"P","A:U")
curdatObs = rbindlist(datObs)
names(curdatObs)[names(curdatObs)=="Trial"] <- "trial_obs"
names(curdatObs)[names(curdatObs)=="Block"] <- "block_obs"
names(curdatObs)[names(curdatObs)=="Group"] <- "pair_obs"
names(curdatObs)[names(curdatObs)=="CorrResp"] <- "agent_confidence"
names(curdatObs)[names(curdatObs)=="SubjResp"] <- "observer_confidence"
names(curdatObs)[names(curdatObs)=="SubjAcc01"] <- "observer_acc"
names(curdatObs)[names(curdatObs)=="SubjRTnorm"] <- "observer_RTnorm"
if(schon_data){curdatObs    = curdatObs[curdatObs$pair_obs!=102,]}
#combine execution and observation
#First remove the trials in which the video was not recorded during execution
exedat      = curdat[-c(2,6,8),]
exedat      = as.data.frame(lapply(exedat, rep, each=4)) #repeat each row 4 times to match the observation data (4 blocks ordered in Excel so that each the first 4 rows represent trial1 from block 1-2-3-4)
exedat_a2a1 = with(exedat, exedat[order(group,-AgentTakingSecondDecision),])#first agent2 acting second, observed by agent1 (to align with obsdat)
names(exedat_a2a1)[names(exedat_a2a1)=="trial"] <- "trial_exe"
names(exedat_a2a1)[names(exedat_a2a1)=="group"] <- "pair_exe"
#Check if the order of agents is the same
all(exedat_a2a1$AgentTakingSecondDecision==curdatObs$Pagent)
all(exedat_a2a1$AgentTakingFirstDecision==curdatObs$Oagent)
if (dim(exedat_a2a1)[1] == dim(curdatObs)[1]){merge = 1}
#merge execution and observation
if (merge) {inout = cbind(exedat_a2a1,curdatObs)}
sinout = inout[,c("pair_exe","pair_obs","Pagent","Oagent","trial_exe","trial_obs","block_obs","Video","targetContrast","firstSecondInterval",
"agent_confidence","observer_confidence","observer_acc","observer_RTnorm",
"A1_acc","A1_conf","A1_confRT","A2_acc","A2_conf","A2_confRT","Coll_acc","Coll_conf","Coll_confRT",
"AgentTakingSecondDecision","rt_final2","mt_final2","A1_rtKin","A2_rtKin","A1_mtKin","A2_mtKin")]
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(
shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(
method = lm, # Add linear regression line
color = "blue",
fill = "#69b3a2",
se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
lim
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)
sinout$pair_exe
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_exe)
# load necessary/useful libraries
## Load libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire",
"ggpur","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
install.packages("ggpubr")
install.packages("ggpubr")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
source("~/GitHub/joint-motor-decision/analyses/pilotData_check_updatedRT.R")
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
curobs = "Results_updated_12012023_magic.xlsx" #observation data
file <- sprintf('%s%s', DataDirObs, curobs)
# read all the sheets, i.e. all the pairs data, the from the excel file of observation
datObs = read_all_sheets(file,"P","A:U")
curdatObs = rbindlist(datObs)
names(curdatObs)[names(curdatObs)=="Trial"] <- "trial_obs"
names(curdatObs)[names(curdatObs)=="Block"] <- "block_obs"
names(curdatObs)[names(curdatObs)=="Group"] <- "pair_obs"
names(curdatObs)[names(curdatObs)=="CorrResp"] <- "agent_confidence"
names(curdatObs)[names(curdatObs)=="SubjResp"] <- "observer_confidence"
names(curdatObs)[names(curdatObs)=="SubjAcc01"] <- "observer_acc"
names(curdatObs)[names(curdatObs)=="SubjRTnorm"] <- "observer_RTnorm"
if(schon_data){curdatObs    = curdatObs[curdatObs$pair_obs!=102,]}
#combine execution and observation
#First remove the trials in which the video was not recorded during execution
exedat      = curdat[-c(2,6,8),]
exedat      = as.data.frame(lapply(exedat, rep, each=4)) #repeat each row 4 times to match the observation data (4 blocks ordered in Excel so that each the first 4 rows represent trial1 from block 1-2-3-4)
exedat_a2a1 = with(exedat, exedat[order(group,-AgentTakingSecondDecision),])#first agent2 acting second, observed by agent1 (to align with obsdat)
names(exedat_a2a1)[names(exedat_a2a1)=="trial"] <- "trial_exe"
names(exedat_a2a1)[names(exedat_a2a1)=="group"] <- "pair_exe"
#Check if the order of agents is the same
all(exedat_a2a1$AgentTakingSecondDecision==curdatObs$Pagent)
all(exedat_a2a1$AgentTakingFirstDecision==curdatObs$Oagent)
if (dim(exedat_a2a1)[1] == dim(curdatObs)[1]){merge = 1}
#merge execution and observation
if (merge) {inout = cbind(exedat_a2a1,curdatObs)}
sinout = inout[,c("pair_exe","pair_obs","Pagent","Oagent","trial_exe","trial_obs","block_obs","Video","targetContrast","firstSecondInterval",
"agent_confidence","observer_confidence","observer_acc","observer_RTnorm",
"A1_acc","A1_conf","A1_confRT","A2_acc","A2_conf","A2_confRT","Coll_acc","Coll_conf","Coll_confRT",
"AgentTakingSecondDecision","rt_final2","mt_final2","A1_rtKin","A2_rtKin","A1_mtKin","A2_mtKin")]
# prepare plotting
#rt - calc the average, se, ci
rt_confObs  = sinout[,c("observer_confidence","rt_final2")]; names(rt_confObs) = c("observer_confidence","time")
rt_confObs_sum = summarySE(rt_confObs,measurevar="time",groupvars=c("observer_confidence"))
#mt - calc the average, se, ci
mt_confObs  = sinout[,c("observer_confidence","mt_final2")]; names(mt_confObs) = c("observer_confidence","time")
mt_confObs_sum = summarySE(mt_confObs,measurevar="time",groupvars=c("observer_confidence"))
names(rt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
names(mt_confObs_sum) = c("observer_confidence","N","var","sd","se","ci")
mt_rt_confObs_sum = rbind(rt_confObs_sum,mt_confObs_sum);
mt_rt_confObs_sum = mt_rt_confObs_sum[!is.na(mt_rt_confObs_sum$observer_confidence),]
mt_rt_confObs_sum$var_lab = c(replicate(length(rt_confObs_sum), "rt"),replicate(length(mt_confObs_sum), "mt"))
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
ggsave(file=sprintf(paste0("%stime_obs_conf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
Rsquared <- summary(fit)$r.squared
print(Rsquared,digits=3)
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
ggsave(file=sprintf(paste0("%sexeconf_vs_obsconf",schon_lab,".png"),PlotDir), dpi = 300, units=c("cm"), height =20, width = 20)
print(conf_exe_obs)
## multiple facets with all the agents
conf_exe_obs + facet_wrap(~pair_obs)+
stat_cor(aes(label = ..rr.label..), color = "red", geom = "label")
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
## Scatterplot
# include linear trend + confidence interval (se)
# jitter the points to avoid overlay of data points (jitter range: 0.5 on both axes)
conf_exe_obs = ggplot(sinout, aes(x = observer_confidence, y = agent_confidence)) +
geom_point(shape = 1,   # Use hollow circles
position = position_jitter(width = 0.1, height = .1)) +
geom_smooth(method = lm, # Add linear regression line
color = "blue", fill = "#69b3a2",se = TRUE) +
annotate("text", x=1.5, y=6, label = paste("R2 = ", format(summary(fit)$r.squared,digits=3)), col="black", cex=6)+
ggtitle("Agent confidence vs observer confidence (all pairs)")
#### Plot agent confidence vs observer confidence (all agents together)
# Linear regression: take observed conf. as predictor for subjective conf.
fit <- lm(sinout$agent_confidence ~ sinout$observer_confidence)
summary(fit)
##
ggplot(mt_rt_confObs_sum, aes(x=observer_confidence, y=var, color=var_lab, group=var_lab)) +
geom_errorbar(aes(ymin=var-se, ymax=var+se), size=0.7, width=.01, position=pd) +
scale_y_continuous(limits = c(0.25,1.75), breaks=seq(0.25,1.75, by=0.25)) +
scale_x_discrete(limits = factor(c(1,2,3,4,5,6)), breaks=seq(1,6, by=1)) +
geom_point(aes(shape=var_lab, color=var_lab, size=var_lab), position=pd) +
geom_line(aes(linetype=var_lab, color=var_lab), size=1, position=pd) +
scale_shape_manual(values=c(15, 16)) +
scale_color_manual(values=c("grey", "black")) +
scale_linetype_manual(values=c("dotted","solid")) +
scale_size_manual(values=c(3,3)) +
xlab("observer confidence") + ylab("time [s]") +   # Set axis labels
ggtitle("MT/RT as a function of confidence (individual 2nd)") +    # Set title
theme_bw() +
theme(plot.title = element_text(face="bold", size=18, hjust = 0.5),
axis.title.x = element_text(face="bold", size=14,vjust=0.1),
axis.title.y = element_text(face="bold", size=14,vjust=2),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12),
panel.border = element_blank(),
axis.line = element_line(color = 'black'),
legend.title=element_blank(),
legend.text = element_text(size=14),
legend.position=c(0.75,0.9))
## Functions
source('C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/temporalLagMEmodulation/Temporal Lag of ME modulation/read_all_sheets.R')
##flag
all_script = FALSE #run all the script
schon_data = FALSE #remove 1 pair(102) because of the unbalanced confidence answers
# select directory
# DataDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/'
# DataDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/video_cut/'
DataDir = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/'
DataDirObs = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/data_obs/'
# save plots here
#PlotDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/pilotPlots/'
# PlotDir <- 'C:/Users/Laura/Sync/00_Research/2022_UKE/Confidence from motion/04_Analysis/pilotData/pilotPlots/video_cut/'
PlotDir = 'C:/Users/MMemeo/OneDrive - Fondazione Istituto Italiano Tecnologia/Documents/GitHub/joint-motor-decision/analyses/plot/'
# load necessary/useful libraries
## Load libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire",
"ggpur","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
source('~/GitHub/JointMotorDecision/analyses/jmd_main_analyses.R')
#Remove variables and plots
rm(list = ls())
graphics.off()
#Load necessary/useful libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire","this.path",
"ggiraphExtra","RColorBrewer","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
#Flags
schon_data = TRUE # if TRUE the dataset doesn't contain the 102 pair
patel_mt   = FALSE # does diff in mt predict confidence?
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
DataDir    = substr(this.path(),1,slash[length(slash)])
DataDirObs =  paste0(DataDir,"data_obs/")
DataDir
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
lapply(pckgs, require, character.only = TRUE)==FALSE
install.packages("effsize","BayesFactor")
install.packages("permuco","RVAideMemoire","this.path","ggiraphExtra","ggrepel","sjstats","writexl")
install.packages("this.path","ggiraphExtra","ggrepel","sjstats","writexl")
#Flags
schon_data = TRUE # if TRUE the dataset doesn't contain the 102 pair
patel_mt   = FALSE # does diff in mt predict confidence?
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
install.packages("this.path")
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
install.packages("this.path")
install.packages("this.path")
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
require("this.path")
install.packages("this.path")
require("this.path")
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
DataDir    = substr(this.path(),1,slash[length(slash)])
source('~/GitHub/JointMotorDecision/analyses/jmd_main_analyses.R')
## Script to analyze JMD pilot data collected in November 2022
#Remove variables and plots
rm(list = ls())
graphics.off()
#Load necessary/useful libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire","this.path",
"ggiraphExtra","RColorBrewer","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
#Flags
schon_data = TRUE # if TRUE the dataset doesn't contain the 102 pair
patel_mt   = FALSE # does diff in mt predict confidence?
#Retrieve the directory of the current file and create the main directory path
slash      = unlist(gregexpr("/", this.path()))
DataDir    = substr(this.path(),1,slash[length(slash)])
DataDirObs =  paste0(DataDir,"data_obs/")
#Save plots here
PlotDir = paste0(DataDir,"plot/")
#Call needed functions
source(paste0(DataDir,'read_all_sheets.R'))
source(paste0(DataDir,'summarySE.R'))
source(paste0(DataDir,'theme_custom.R'))
source(paste0(DataDir,'plotSE.R'))
source(paste0(DataDir,'final_rtmt_byAgent.R'))
#Initialize variables
decision1 = c()
conf1     = c()
acc1      = c()
decision2 = c()
conf2     = c()
acc2      = c()
##############################################################################################################
#                                     EXECUTION                                                              #
##############################################################################################################
#Create data frame of execution part - retrieve data from an Excel file that was manually created by merging the single pair files.
#Single pair files were created with movement_onset.m matlab file, starting from the .mat files acquired during the exp.
#If the Excel file is: pilotData_all_BY.xlsx
#B=blue participant (previously A1) - now A1 is agent taking 1st decision
#Y=yellow participant (previously A2) - now A2 is agent taking 2nd decision
cursub = "pilotData_all_BY.xlsx" # execution data
Filetmp <- sprintf('%s%s', DataDir, cursub)
#Read all the sheets till the selected columns and create curdat dataframe.
dat       = read_all_sheets(Filetmp,"P","A:AH")
list_size = lapply(dat,lengths)
group     = c(rep(100,list_size[[1]][[1]]),rep(101,list_size[[2]][[1]]),rep(102,list_size[[3]][[1]]),rep(103,list_size[[4]][[1]]))
trial     = c(1:list_size[[1]][[1]],1:list_size[[2]][[1]],1:list_size[[3]][[1]],1:list_size[[4]][[1]])
#Rbind all the excel sheets
curdat    = rbindlist(dat)
curdat    = cbind(group,trial,curdat) # added at the beginning of the dataframe
#Add a column to express the agreement on the perceptual task between the 2 agents. [1=agreement, -1=disagreement]
curdat$agree = as.integer(curdat$B_decision == curdat$Y_decision)
curdat$agree[curdat$agree==0]=-1
#Create additional columns in which there values of the 1st/2nd decisions and corresponding confidence and accuracy
for (row in 1:dim(curdat)[1])
{
f_dec = curdat[row,AgentTakingFirstDecision]#agent taking first decision
if (f_dec=="B"){decision1[row] = curdat[row,B_decision]
conf1[row]     = curdat[row,B_conf]
acc1[row]      = curdat[row,B_acc]}else{decision1[row] = curdat[row,Y_decision]
conf1[row]     = curdat[row,Y_conf]
acc1[row]      = curdat[row,Y_acc]}
s_dec = curdat[row,AgentTakingSecondDecision]#agent taking second decision
if (s_dec=="B"){decision2[row] = curdat[row,B_decision]
conf2[row]     = curdat[row,B_conf]
acc2[row]      = curdat[row,B_acc]}else{decision2[row] = curdat[row,Y_decision]
conf2[row]     = curdat[row,Y_conf]
acc2[row]      = curdat[row,Y_acc]}
}
#add the values of decision 1 and 2 to the dataframe (and relative confidence and accuracy)
curdat$decision1   = decision1
curdat$decision2   = decision2
curdat$confidence1 = conf1
curdat$confidence2 = conf2
curdat$accuracy1   = acc1
curdat$accuracy2   = acc2
#Add a column to show if there was a switching in the collective decision respect to the first decision [1=switch, -1=no switch]
curdat$switch    = as.integer(curdat$decision1 != curdat$Coll_decision)
curdat$switch[curdat$switch==0]=-1
### Sanity check
all(as.integer(curdat$B_decision == curdat$Y_decision) == as.integer(curdat$decision1 == curdat$decision2))
#Remove pair 102 - didn't follow the instructions
if(schon_data){curdat    = curdat[curdat$group!=102,]
schon_lab = "noPair102" } else{schon_lab = ""}
#configure plot variables
pd           = position_dodge(0.001)
conf_scale   = list("lim"=c(1,6),"breaks"=seq(1,6, by=1))
target_scale = list("breaks"=unique(curdat$targetContrast),"labels"=unique(curdat$targetContrast))
##################  CONFIDENCE BY TARGET CONTRASTS  ##################
#According to the level of agreement (include only A1 decisions)
conf_all <- curdat[,c("targetContrast","confidence1","Coll_conf","agree")]
conf_all_long <- melt(conf_all, id=c("targetContrast","agree"))  # convert to long format
levels(conf_all_long$variable) <- c("Individual_A1", "Collective")
conf_all_sum = summarySE(conf_all_long,measurevar="value",groupvars=c("variable","targetContrast","agree"))
# rename variables
names(conf_all_sum)[names(conf_all_sum)=='value'] <- 'Confidence'
names(conf_all_sum)[names(conf_all_sum)=='variable'] <- 'DecisionType'
# rename factor levels
conf_all_sum$agree = as.factor(conf_all_sum$agree)
levels(conf_all_sum$agree) <- c("disagree", "agree")
# plot - Confidence level by target contrast and agreement
print(plotSE(df=conf_all_sum,xvar=conf_all_sum$targetContrast,yvar=conf_all_sum$Confidence,
colorvar=conf_all_sum$DecisionType,shapevar=conf_all_sum$agree,
xscale=target_scale,yscale=conf_scale,titlestr="Confidence level by agreement",
manual_col=c("steelblue1", "darkgreen"),linevar=c("dashed","solid"),sizevar=c(3,3),disco=FALSE)+
xlab("Target contrasts") + ylab("Confidence level") + theme_custom())
#Remove variables and plots
rm(list = ls())
graphics.off()
#Load necessary/useful libraries
pckgs = c("data.table","lattice","lme4", "nlme","emmeans","doBy","effsize","ez","MuMIn","BayesFactor","permuco","RVAideMemoire","this.path",
"ggiraphExtra","RColorBrewer","readxl","stringr","knitr","multcomp","ggplot2","car","dplyr", "plyr","lmerTest","ggrepel","sjstats","reshape2","writexl")
sum(lapply(pckgs, require, character.only = TRUE)==FALSE)#Check how many packages failed the loading
install.packages(c("BayesFactor", "permuco", "RVAideMemoire", "ggiraphExtra", "ggrepel", "sjstats"))
source('~/GitHub/JointMotorDecision/analyses/jmd_main_analyses.R')
